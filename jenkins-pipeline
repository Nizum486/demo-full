pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: slave
spec:
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: node-role.kubernetes.io/cicd
            operator: In
            values:
            - ""
  containers:
  - name: jnlp
    image: 'registry.local.cloud:5000/jenkins/inbound-agent:4.11.2-4'
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
  - name: docker
    image: registry.local.cloud:5000/library/docker:latest
    command: ['/bin/cat']
    tty: true
    readinessProbe:
      exec:
        command: ['ls', '/certs/client/ca.pem']
      initialDelaySeconds: 3
      periodSeconds: 1
    volumeMounts:
      - name: dind-certs
        mountPath: /certs/client
    env:
      - name: DOCKER_TLS_CERTDIR
        value: /certs
      - name: DOCKER_CERT_PATH
        value: /certs/client
      - name: DOCKER_TLS_VERIFY
        value: "1"
      - name: DOCKER_HOST
        value: tcp://localhost:2376
  - name: dind
    image: registry.local.cloud:5000/library/docker:dind
    securityContext:
      privileged: true
    env:
      - name: DOCKER_TLS_CERTDIR
        value: /certs
    volumeMounts:
      - name: dind-storage
        mountPath: /var/lib/docker
      - name: dind-certs
        mountPath: /certs/client
      - name: ca-certs
        mountPath: /etc/ssl/certs
    command:
      - sh
      - -c
      - |
        mkdir -p /etc/docker && echo '{"insecure-registries": ["harbor.k8s.donga.ac.kr"]}' > /etc/docker/daemon.json
        dockerd-entrypoint.sh
  - name: argocd
    image: registry.local.cloud:5000/argoproj/argocd:v2.5.4
    command: ['cat']
    tty: true
    securityContext:
      runAsUser: 0
  volumes:
    - name: dind-storage
      emptyDir: {}
    - name: dind-certs
      emptyDir: {}
    - name: ca-certs
      secret:
        secretName: os-root-ca
            """
        }
    }

    environment {
        PROJECT = 'demo-full'
        GROUP = 'playce-admin'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        GITEA_URL = 'gitea.k8s.playce.cloud'
        GITOPS_REPO = 'demo-full-ops'
        HARBOR_REGISTRY = 'harbor.k8s.playce.cloud'
        HARBOR_PROJECT = 'bs-test'
        ARGOCD_URL = 'argo.k8s.playce.cloud'
    }

    stages {
        stage('Checkout Source') {
            steps {
                container('jnlp') {
                    script {
                        // Git SSL 인증서 검증 비활성화
                        sh 'git config --global http.sslVerify false'
                    }
                    checkout([$class: 'GitSCM',
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[
                            url: "http://${GITEA_URL}/${GROUP}/${PROJECT}.git",
                            credentialsId: 'gitUser'
                        ]]
                    ])
                }
            }
        }

        stage('Build Docker Image (.NET & Next.js)') {
            steps {
                container('docker') {
                    withCredentials([usernamePassword(credentialsId: 'harborUser', usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]) {
                        // backend Docker 이미지 빌드
                        sh """
                        docker build -t ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${PROJECT}-backend:${IMAGE_TAG} ./backend
                        """
            
                        // frontend Docker 이미지 빌드
                        sh """
                        docker build -t ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${PROJECT}-frontend:${IMAGE_TAG} ./frontend
                        """
            
                        // Harbor 로그인 및 이미지 푸시
                        sh """
                        echo "${HARBOR_PASS}" | docker login ${HARBOR_REGISTRY} -u "${HARBOR_USER}" --password-stdin
                        docker push ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${PROJECT}-backend:${IMAGE_TAG}
                        docker push ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${PROJECT}-frontend:${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Update GitOps Manifest') {
            steps {
                container('jnlp') {
                    dir('gitops') {
                        git url: "https://${GITEA_URL}/${GROUP}/${GITOPS_REPO}.git", credentialsId: 'gitUser', branch: 'master'
        
                        script {
                            def valuesFile = "./${GITOPS_REPO}/values.yaml"
        
                            withCredentials([usernamePassword(credentialsId: 'gitUser', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                                sh """
                                git config --global http.sslVerify false
                                git config --global user.name "${GIT_USER}"
                                git config --global user.email "jenkins@${GROUP}.com"
                                git config --global credential.helper store
                                echo "https://${GIT_USER}:${GIT_PASS}@${GITEA_URL}" > ~/.git-credentials
        
                                ls -al
        
                                # Replace image tag for backend and frontend
                                sed -i 's|image: ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${PROJECT}:.*|image: ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${PROJECT}:${IMAGE_TAG}|' ${valuesFile}
                                sed -i '/frontend:/,/service:/s|tag:.*|tag: ${IMAGE_TAG}|' ${valuesFile}
                                sed -i '/backend:/,/service:/s|tag:.*|tag: ${IMAGE_TAG}|' ${valuesFile}
        
                                cat ${valuesFile}
        
                                git add ${valuesFile}
                                git commit -m "Update image tag to ${IMAGE_TAG} for ${PROJECT}"
                                git push https://${GITEA_URL}/${GROUP}/${GITOPS_REPO}.git HEAD:master
                                """
                            }
                        }
                    }
                }
            }
        }


        stage('Trigger ArgoCD Sync') {
            steps {
                container('argocd') {
                    withCredentials([usernamePassword(credentialsId: 'argocdUser', usernameVariable: 'ARGO_USER', passwordVariable: 'ARGO_PASS')]) {
                        sh """
                        argocd login ${ARGOCD_URL} --username $ARGO_USER --password $ARGO_PASS --insecure
                        argocd app sync ${PROJECT}
                        """
                    }
                }
            }
        }
    }
}

